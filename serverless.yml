service: rml-crm-app-backend
# Create an optimized package for the functions
package:
  individually: true
provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: prod
  region: us-east-1

  # environment:
  #  var_name: ${env:VARIABLE}

functions:
  # Customer functions
  customer_create:
    handler: customers.create
    events:
      - http:
          path: customers
          method: post
          cors: true
          authorizer: aws_iam

  customer_getOne:
    handler: customers.getOne
    events:
      - http:
          path: customers/{id}
          method: get
          cors: true
          authorizer: aws_iam

  customer_getAll:
    handler: customers.getAll
    events:
      - http:
          path: customers
          method: get
          cors: true
          authorizer: aws_iam

  customer_update:
    handler: customers.update
    events:
      - http:
          path: customers/{id}
          method: put
          cors: true
          authorizer: aws_iam

  customer_delete:
    handler: customers.delete
    events:
      - http:
          path: customers/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  #Quote functions
  quote_add:
    handler: quotes.create
    events:
      - http:
          path: quotes
          method: post
          cors: true
          authorizer: aws_iam

  quote_get_by_id:
    handler: quotes.getQuoteById
    events:
      - http:
          path: quotes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  quote_getAll:
    handler: quotes.getAllQuotes
    events:
      - http:
          path: quotes
          method: get
          cors: true
          authorizer: aws_iam

  quote_update:
    handler: quotes.updateQuote
    events:
      - http:
          path: quotes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  quote_delete:
    handler: quotes.deleteQuote
    events:
      - http:
          path: quotes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # Payment functions
  payment_add:
    handler: payments.create
    events:
      - http:
          path: payments
          method: post
          cors: true
          authorizer: aws_iam

  payment_get_by_id:
    handler: payments.getOne
    events:
      - http:
          path: payments/{id}
          method: get
          cors: true
          authorizer: aws_iam

  payment_getAll:
    handler: payments.getAll
    events:
      - http:
          path: payments
          method: get
          cors: true
          authorizer: aws_iam

  payment_update:
    handler: payments.update
    events:
      - http:
          path: payments/{id}
          method: put
          cors: true
          authorizer: aws_iam

  payment_delete:
    handler: payments.delete
    events:
      - http:
          path: payments/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  payment_get_by_customer:
    handler: payments.getByCustomer
    events:
      - http:
          path: payments/search/{query}
          method: get
          cors: true
          authorizer: aws_iam

  # Invoice functions
  invoice_add:
    handler: invoices.create
    events:
      - http:
          path: invoices
          method: post
          cors: true
          authorizer: aws_iam

  invoice_get_by_id:
    handler: invoices.getOne
    events:
      - http:
          path: invoices/{id}
          method: get
          cors: true
          authorizer: aws_iam

  invoice_getAll:
    handler: invoices.getAll
    events:
      - http:
          path: invoices
          method: get
          cors: true
          authorizer: aws_iam

  invoice_update:
    handler: invoices.update
    events:
      - http:
          path: invoices/{id}
          method: put
          cors: true
          authorizer: aws_iam

  invoice_delete:
    handler: invoices.delete
    events:
      - http:
          path: invoices/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  invoice_get_by_customer:
    handler: invoices.getByCustomer
    events:
      - http:
          path: invoices/search/{query}
          method: get
          cors: true
          authorizer: aws_iam

  # Location functions
  location_add:
    handler: locations.create
    events:
      - http:
          path: locations
          method: post
          cors: true
          authorizer: aws_iam

  location_get_by_id:
    handler: locations.getOne
    events:
      - http:
          path: locations/{id}
          method: get
          cors: true
          authorizer: aws_iam

  location_getAll:
    handler: locations.getAll
    events:
      - http:
          path: locations
          method: get
          cors: true
          authorizer: aws_iam

  location_update:
    handler: locations.update
    events:
      - http:
          path: locations/{id}
          method: put
          cors: true
          authorizer: aws_iam

  location_delete:
    handler: locations.delete
    events:
      - http:
          path: locations/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  locations_get_by_customer:
    handler: locations.getByCustomer
    events:
      - http:
          path: locations/search/{query}
          method: get
          cors: true
          authorizer: aws_iam

  # DocuSign functions
  docusign_create:
    handler: docuSign.create # point to exported create function in handler.js
    events:
      - http:
          path: docusign
          method: post
          cors: true
          authorizer: aws_iam

  docusign_getLast:
    handler: docusign.getLast
    events:
      - http:
          path: customers/getAuth
          method: get
          cors: true
          authorizer: aws_iam

plugins:
  - serverless-offline
  # - serverless-bundle # Package our functions with Webpack
  # - serverless-dotenv-plugin
